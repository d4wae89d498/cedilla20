#!/usr/bin/php
<?php 
const version = 1.1; 
const default_flags = ["-didecompat=0"];
const default_compiler = "gcc";

/**
 * @param string[] $var
 */
function cedilla_apply(string $source, $vars): string
{
    $tokens = token_get_all($source);

    var_dump($tokens);
}

function main(int $argc, array $argv): int
{
    echo $argv[0] . " version " .version . PHP_EOL;
    $file = $argv[$argc - 1];
    if ($argc < 2 || !is_string($file))
    {
        echo "Usage: " . $argv[0] . " [-dTEST -dNAME ...] <file.c>" . PHP_EOL;
        echo "(note: multiple C files are not supported, and gcc flags must be written before the <file.c>)" . PHP_EOL;
        exit (1);
    }
    if (!is_file($file ))
    {
        echo "file " . $file ." not found !" . PHP_EOL;
        exit (1);
    }
    
    $args = array_slice($argv, 1, count($args) - 1);
    unset ($args[0]);
    unset ($args[count($args) - 1]);
   
    $options = getopt("d::");
    var_dump($options);
    $source = file_get_contents($arv[$argc - 1]);
    $stop_at_compiler = ($var["COMPILER"] ?? 0) > 0;
    $vars["COMPILER"] = 1;
    $generated_compiler = cedilla_apply($source, $vars);
    if ($stop_at_compiler)
    {
        echo $generated_compiler . PHP_EOL;
        return 0;
    }
    file_put_contents($file . "_compiler", $generated_compiler);
    aray_slice($args, 0, count($args) - 1);
    exec ("./${file}_compiler " . join(" ", $args)) . "  $file";
    $compiler = getenv("cc") ?? "gcc";
    $new_args = [];
    foreach ($args as $arg)
    {
        if (strpos("-dCOMPILER", $arg) !== false)
            continue ;
        $new_arg[] = $arg;
    }
    exec ("$compiler " . join(" ", $args));
    if ($options["-E"])
    {
        echo $new_source . PHP_EOL;
        return 0;
    }
    exec ("$compiler " . join(" ", $args));
    return 0;
}

exit(main($argc, $argv));
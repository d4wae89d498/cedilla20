#include "cedilla.h"

macro
{
    if (**src == '"')
    {
        if (ctx_is_code(*ctx))
            ctx->is.str = 1;
        else if (ctx->is.str)
            ctx->is.str = 0;
    }
    if (**src == '\'')
    {
        if (ctx_is_code(*ctx))
            ctx->is.chr = 1;
        else if (ctx->is.chr)
            ctx->is.chr = 0;
    }
    if (**src == '/' && *(*src + 1) == '/')
    {
        if (ctx_is_code(*ctx))
            ctx->is.comment = 1;
    }
    if (**src == '/' && *(*src + 1) == '*')
    {
        if (ctx_is_code(*ctx))
            ctx->is.comments = 1;
    }
    if (**src == '*' && *(*src + 1) == '/')
    {
        if (ctx->is.comments)
            ctx->is.comments = 0;
    }
    if (**src == '\n')
    {
        ctx->is.comment = 0;
        ctx->is.str = 0;
        ctx->is.chr = 0;
    }
    if (ctx_is_code(*ctx))
    {
        if (**src == '(')
            ctx->levels.parentheses += 1;
        if (**src == '[')
            ctx->levels.brackets += 1;
        if (**src == '{')
            ctx->levels.braces += 1;
        if (**src == ')')
            ctx->levels.parentheses -= 1;
        if (**src == ']')
            ctx->levels.brackets -= 1;
        if (**src == '}')
            ctx->levels.braces -= 1;
    }
    return (0);
}


macro 
{
    char        *new_src = *src;
    parser_ctx  new_ctx = *ctx;
    char        *file_path = "";

    if (ctx_is_code(*ctx) && !ctx->levels.brackets && !ctx->levels.parentheses)
    {
        if ((!ctx->levels.columns || *(new_src - 1) == '\n') && ctx_is_code(*ctx) && !ctx->levels.parentheses && !ctx->levels.brackets)
        {
            if (!(*new_src == '#'))
                return 0;
            cursor_incr(&new_src, &new_ctx, 1);
            fprintf(stderr, "CPP %s\t%i:%i\n", ctx->file, ctx->levels.lines, ctx->levels.columns);
            while (isspace(*new_src) && *new_src != '\n')
                cursor_incr(&new_src, &new_ctx, 1);
            if (*new_src == '\n')
                return (0);
            if (!strncmp(new_src, "include", 7))
            {
                cursor_incr(&new_src, &new_ctx, 7);
                fprintf(stderr, "INCLUDE!! [%.10s]\n", new_src);
                while (isspace(*new_src) && *new_src != '\n')
                    cursor_incr(&new_src, &new_ctx, 1);
                if (*new_src == '\n')
                {
                    fprintf(stderr, "%s: error: unexpected '\\n' at line %i and col %i\n", ctx->file, ctx->levels.lines, ctx->levels.columns);
                }
                else if (*new_src == '\"')
                {
                    cursor_incr(&new_src, &new_ctx, 1);
                    while (*new_src && *new_src != '\"' && *new_src != '\n')
                    {
                        asprintf(&file_path, "%s%c", file_path, *new_src);
                        cursor_incr(&new_src, &new_ctx, 1);
                    }
                    if (!*new_src || *new_src == '\n')
                    {
                        fprintf(stderr, "%s: error: unexpected '\\n' at line %i and col %i\n", ctx->file, ctx->levels.lines, ctx->levels.columns);
                    }
                    else 
                    {
                        fprintf(stderr, "INCLUDE FILE: %s\n", file_path);
                        // todo : parse file_path
                    }
                }
                else if (*new_src == '<')
                {
                    // TODO : implement include path (-I) flag
                    cursor_incr(&new_src, &new_ctx, 1);
                    while (*new_src && *new_src != '>' && *new_src != '\n')
                    {
                        asprintf(&file_path, "%s%c", file_path, *new_src);
                        cursor_incr(&new_src, &new_ctx, 1);
                    }
                    if (!*new_src || *new_src == '\n')
                    {
                        fprintf(stderr, "%s: error: unexpected '\\n' at line %i and col %i\n", ctx->file, ctx->levels.lines, ctx->levels.columns);
                    }
                    else 
                    {
                        fprintf(stderr, "INCLUDE FILE (W/ INCLUDE_PATH): %s\n", file_path);
                    }
                }
                else 
                {
                    fprintf(stderr, "%s: error: unexpected '%c' at line %i and col %i\n", ctx->file, *new_src, ctx->levels.lines, ctx->levels.columns);
                }
            }

        }
    }
    return (0);
}

#if TEST
#undef TEST
#define TEST 0
# include "../spec/compile_time.รง"
#undef TEST
#define TEST 1
#endif
# if IDE_COMPAT
#  define __BRACKETS__ 0
#  define __PARENTHESES__ 0
#  define __BRACES__ 0
# endif

macro
{
    char *r;
    if (!strncmp(*src, "__BRACKETS__", 12) && ctx_is_code(*ctx))
    {
        *src += 12;
        asprintf(&r, "%i", ctx->levels.brackets);
        return (r);
    }
    if (!strncmp(*src, "__PARENTHESES__", 15) && ctx_is_code(*ctx))
    {
        *src += 15;
        asprintf(&r, "%i", ctx->levels.parentheses);
        return (r);
    }
    if (!strncmp(*src, "__BRACES__", 10) && ctx_is_code(*ctx))
    {
        *src += 10;
        asprintf(&r, "%i", ctx->levels.braces);
        return (r);
    }
    return (0);
}
#if TEST

macro 
{
    if (ctx->is.str && !strncmp(*src, "__TEST21__", 10))
    {
        *src += 10;
        return "42";
    }
    if (ctx->is.comment && !strncmp(*src, "__TEST44__", 10))
    {
        *src += 10;
        return "21";
    }
    if (ctx->is.comments && !strncmp(*src, "__TEST41__", 10))
    {
        *src += 10;
        return "12";
    }
    return (0);
}

macro 
{
    if (!ctx_is_code(*ctx) && !strncmp(*src, "comment_compile_time_assert_str_eq", 34))
    {
        *src += 34;
        while (isspace(**src))
            *src += 1;
        try_apply_macros(macros, src, ctx);
        int a = 0;
        while (isdigit(**src))
        {
            a *= 10;
            a += **src - '0';
            *src += 1;
        }
        while (isspace(**src))
            *src += 1;
        int b = 0;
        while (isdigit(**src))
        {
            b *= 10;
            b += **src - '0';
            *src += 1;
        }
        assert(a == b);
    }
    return (0);
}

int main()
{
    if (1)
    {
        assert(__BRACES__ == 2);
    }
    assert(__PARENTHESES__ == 1);
    assert(((__PARENTHESES__)) == 3);
    assert("1234"["1234"[__BRACKETS__] - '0'] == '4');
    assert(__BRACES__ == 1);
    assert(__PARENTHESES__ == 1);
    assert(__BRACKETS__ == 0);
    assert(!strcmp("__TEST21__", "42"));

    /* comment_compile_time_assert_str_eq __TEST41__ 12 */
    // comment_compile_time_assert_str_eq __TEST44__ 21

    printf("OK\n");
}
// todo: avoid incompatible macro usage with
// - language x [extends y] 


#endif
